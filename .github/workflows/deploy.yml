name: Deploy

on:
  # allow manual dispatch
  workflow_dispatch:
  # run on PRs
  push:
    branches:
      - master

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Set up pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: 6

      - name: Cache Maven Deps
        uses: actions/cache@v2
        with:
          path: $GITHUB_WORKSPACE/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build backend
        run: mvn --batch-mode --errors --fail-at-end --show-version --no-transfer-progress -Dmaven.repo.local=$GITHUB_WORKSPACE/.m2/repository install

      - name: Cache pnpm
        uses: actions/cache@v2
        with:
          path: "~/.pnpm-store"
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Cache Yarn
        uses: actions/cache@v2
        with:
          path: "~/.cache/yarn"
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install frontend deps
        env:
          CI: true
        run: (cd frontend-new && pnpm install --frozen-lockfile && cd server && pnpm install --frozen-lockfile)

      - name: Install frontend deps old
        env:
          CI: true
        run: (cd frontend && yarn install --frozen-lockfile --cache-folder ~/.cache/yarn)

      - name: Lint frontend
        env:
          CI: true
        run: (cd frontend-new && pnpm lint:eslint)

      - name: Lint frontend old
        env:
          CI: true
        run: (cd frontend && yarn lint)

      - name: Sync forth and back with crowdin
        uses: crowdin/github-action@1.4.0
        with:
          upload_sources: true
          download_translations: true
          push_translations: false
          create_pull_request: false
          skip_untranslated_strings: true
          config: 'crowdin.yml'
          crowdin_branch_name: master
        env:
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

      - name: Build frontend
        env:
          CI: true
          # keep these in sync with compose!
          proxyHost: "http://hangar_new_backend:8080"
          authHost: "https://hangar-auth.benndorf.dev"
          host: "0.0.0.0"
          PUBLIC_HOST: "https://hangar.benndorf.dev"
        run: (cd frontend-new && pnpm build && cd server && pnpm build)

      - name: Build frontend old
        env:
          CI: true
          # keep these in sync with compose!
          proxyHost: "http://hangar_new_backend:8080"
          authHost: "https://hangar-auth.benndorf.dev"
          host: "0.0.0.0"
          PUBLIC_HOST: "https://hangar-old.benndorf.dev"
        run: (cd frontend && yarn build)

      - name: SSH
        uses: webfactory/ssh-agent@v0.5.2
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        with:
          ssh-private-key: ${{ secrets.DOCKER_HOST_SSH_KEY }}

      - name: Cache Docker Layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Docker
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          SSO_CLIENT_ID: ${{ secrets.SSO_CLIENT_ID }}
          SSO_SECRET: ${{ secrets.SSO_SECRET }}
          API_KEY: ${{ secrets.API_KEY }}
          TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}
        run: |
          echo ${{ secrets.DOCKER_HOST_SSH_SIG }} > ~/.ssh/known_hosts
          cd docker/deployment
          echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ secrets.CR_USER }} --password-stdin
          docker-compose build
          docker-compose push
          DOCKER_HOST="${{ secrets.DOCKER_HOST }}" docker stack deploy --with-registry-auth --compose-file=docker-compose.yml hangar_new
